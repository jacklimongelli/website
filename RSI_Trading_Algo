import pandas as pd
import matplotlib.pyplot as plt
import random

dataframe = pd.read_csv("/Users/Jack/Desktop/Python Data.csv")
price_list = dataframe['Price'].tolist()

# Simulate prices coming in
RSI_length_list = [5, 10, 15, 20, 25, 30, 35, 40]

count = 1
incoming_price_list = []
percentage_change_list = []
RSI_list = []
RSI_length = 14
average_gain_list = []
average_loss_list =[]
average_gain = 0
average_loss = 0
while count < len(price_list):
    price = price_list[len(price_list) - count]
    count = count + 1
    incoming_price_list.insert(0,price)
    if len(incoming_price_list) >= 2:
        percentage_change = ((incoming_price_list[0] / incoming_price_list[1]) - 1 )
        percentage_change_list.insert(0,percentage_change)
    # RSI Calculation
    if len(percentage_change_list) == RSI_length:
        gain_loss_list = percentage_change_list[0:(RSI_length - 1)]
        for x in gain_loss_list:
            if x > 0:
                average_gain = average_gain + x
                average_gain_list.insert(0, average_gain)
            if x < 0:
                average_loss = average_loss + x
                average_loss_list.insert(0, average_loss)
        if average_gain == 0:
            RSI = 0
        else:
            if average_loss == 0:
                RSI = 100
            else:
                RSI = (100 - (100/(1+((average_gain/RSI_length)/(average_loss/RSI_length)))))
        RSI_list.insert(0,RSI)
    if len(percentage_change_list) > RSI_length:
        gain_loss_list = percentage_change_list[0:(RSI_length - 1)]
        for x in gain_loss_list:
            if x > 0:
                average_gain = average_gain_list[0] + x
                average_gain_list.insert(0,average_gain)
            if x < 0:
                average_loss = average_loss_list[0] + x
                average_gain_list.insert(0,average_loss)
        if average_gain == 0:
            RSI = 0
        else:
            if average_loss == 0:
                RSI = 100
            else:
                RSI = (100 - (100/(1+ (((average_gain_list[1]*(RSI_length - 1))+average_gain_list[0])/(average_loss_list[1]*(RSI_length - 1))+average_loss_list[0]))))       
        RSI_list.insert(0,RSI)
RSI_list_two_decimals = []
for x in RSI_list:
    new_x = round(x,2)
    RSI_list_two_decimals.append(new_x)
x_value_list = []
count = 0
for x in RSI_list:
    x_value = count + 1
    count = count + 1
    x_value_list.append(x_value)

# Trade Notifications
buy_level_list = [-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 45]
sell_level_list = [110, 105, 100, 95, 90, 85, 80, 75, 70, 65,60]
level_combo_list = []
value_list = []
return_list = []

for x in buy_level_list:
    buy_level = x
    for y in sell_level_list:
        sell_level = y
        period_length = 500
        start = random.randint(1,len(RSI_list) - period_length)
        end = start + period_length
        RSI_trade_list = RSI_list[start:end]
        price_trade_list = incoming_price_list[start:end]
        RSI_trade_list_reversed = []
        price_trade_list_reversed = []
        for x in RSI_trade_list:
            RSI_trade_list_reversed.insert(0, x)
        for x in price_trade_list:
            price_trade_list_reversed.insert(0, x)
        count = 0
        trade_list = []
        trade_list_price = []
        x = 'null'
        trade_list.append(x)
        trade_list_price.append(x)
        while count < period_length:
            if RSI_trade_list_reversed[count] >= sell_level:
                x = 'sell'
            else:
                if RSI_trade_list_reversed[count] <= buy_level:
                    x = 'buy'
                else:
                    x = 'no trade'
            if trade_list[len(trade_list)-1] != x:
                if x != 'no trade':
                    trade_list.append(x)
                    trade_list_price.append(price_trade_list_reversed[count])
            count = count + 1

        if trade_list[1] == 'buy':
            if trade_list[len(trade_list)-1] == 'buy':
                trade_list = trade_list[1:len(trade_list)-1]
                trade_list_price = trade_list_price[1:len(trade_list)-1]
            else:
                trade_list = trade_list[1:]
                trade_list_price = trade_list_price[1:]        
        else:
            if trade_list[len(trade_list)-1] == 'buy':
                trade_list = trade_list[2:len(trade_list)-1]
                trade_list_price = trade_list_price[2:len(trade_list)-1]
            else:
                trade_list = trade_list[2:]
                trade_list_price = trade_list_price[2:]    

        # Calculate P&L
        percentage_change_list =[]
        count = 1
        while count < len(trade_list_price):
            change = ((trade_list_price[count]/trade_list_price[count - 1]) - 1)
            percentage_change_list.append(change)
            count = count + 1
        count = 0
        sell_percentage_change_list =[]
        for x in percentage_change_list:
            if count % 2 != 0:
                sell_percentage_change_list.append(x)
            count = count + 1

        value = 10000
        starting_investment = value
        fee_dollar = 5
        portfolio_value =[]
        count = 0
        while count < len(sell_percentage_change_list):
            value = (value * (1 + sell_percentage_change_list[count])) - fee_dollar
            count = count + 1
        # print(round(value,2))
        percentage_return = ((value - starting_investment)/starting_investment) * 100
        # print(round(percentage_return,2))
        value_list.append(value)
        return_list.append(percentage_return)
        level_combo = (str(buy_level) + str(sell_level))
        level_combo_list.append(level_combo)
        

output_df = pd.DataFrame(list(zip(level_combo_list, value_list, return_list)),
                         columns = ['Level Combo', 'Value' , 'Return'])
sorted_output_df = output_df.sort_values('Return',ascending=False)
print(sorted_output_df)
